// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrixInverse
arma::mat matrixInverse(const arma::mat& A);
RcppExport SEXP _CppMatrix_matrixInverse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrixInverse(A));
    return rcpp_result_gen;
END_RCPP
}
// matrixMultiply
arma::mat matrixMultiply(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _CppMatrix_matrixMultiply(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMultiply(A, B));
    return rcpp_result_gen;
END_RCPP
}
// matrixVectorMultiply
arma::vec matrixVectorMultiply(const arma::mat& A, const arma::vec& b);
RcppExport SEXP _CppMatrix_matrixVectorMultiply(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixVectorMultiply(A, b));
    return rcpp_result_gen;
END_RCPP
}
// matrixCor
arma::mat matrixCor(const arma::mat& A);
RcppExport SEXP _CppMatrix_matrixCor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrixCor(A));
    return rcpp_result_gen;
END_RCPP
}
// matrixEigen
Rcpp::List matrixEigen(const arma::mat& A);
RcppExport SEXP _CppMatrix_matrixEigen(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrixEigen(A));
    return rcpp_result_gen;
END_RCPP
}
// matrixKronecker
arma::mat matrixKronecker(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _CppMatrix_matrixKronecker(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixKronecker(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CppMatrix_matrixInverse", (DL_FUNC) &_CppMatrix_matrixInverse, 1},
    {"_CppMatrix_matrixMultiply", (DL_FUNC) &_CppMatrix_matrixMultiply, 2},
    {"_CppMatrix_matrixVectorMultiply", (DL_FUNC) &_CppMatrix_matrixVectorMultiply, 2},
    {"_CppMatrix_matrixCor", (DL_FUNC) &_CppMatrix_matrixCor, 1},
    {"_CppMatrix_matrixEigen", (DL_FUNC) &_CppMatrix_matrixEigen, 1},
    {"_CppMatrix_matrixKronecker", (DL_FUNC) &_CppMatrix_matrixKronecker, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CppMatrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
